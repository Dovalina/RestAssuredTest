package petStoreApi;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;

import static io.restassured.RestAssured.given;

import org.testng.annotations.Test;

import static org.hamcrest.Matchers.*;

import java.io.File;




public class PetStoreApiTest extends TestConfig {

	 //BaseURI
//	public static String baseURI = "http://localhost:8080/api/v3";
	

	@Test(priority = 1)
    public void testCreatePet() {
        String requestBody = "{ \"id\": 101, \"name\": \"Mascota Sergio\", \"status\": \"available\" }";

        Response response = given()
            .body(requestBody)
            .header("Content-Type", "application/json")
        .when()
            .post("/pet");

        response.then()
            .statusCode(200)
            .body("name", equalTo("Mascota Sergio"))
            .body("id", equalTo(101))
            .body("status", equalTo("available"));

        // Obtener y mostrar la información de la mascota creada
        int id = response.jsonPath().getInt("id");
        String name = response.jsonPath().getString("name");
        String status = response.jsonPath().getString("status");

        System.out.println("Mascota creada con ID: " + id + ", Nombre: " + name + ", Estado: " + status);
    }

	@Test(priority = 2)
    public void testGetPetById() {
        int petId = 101; // Usar el ID de la mascota creada en la prueba anterior

        Response response = given()
            .pathParam("petId", petId)
        .when()
            .get("/pet/{petId}");

        response.then()
            .statusCode(200)
            .body("id", equalTo(petId));

        // Obtener y mostrar la información de la mascota consultada
        int id = response.jsonPath().getInt("id");
        String name = response.jsonPath().getString("name");
        String status = response.jsonPath().getString("status");

        System.out.println("Mascota consultada con ID: " + id + ", Nombre: " + name + ", Estado: " + status);
    }

	@Test(priority = 3)
    public void testUpdatePet() {
        int petId = 101; // Usar el ID de la mascota creada en la prueba anterior
        String requestBody = "{ \"id\": " + petId + ", \"name\": \"Mascota Sergio Actualizada\", \"status\": \"sold\" }";

        Response response = given()
            .body(requestBody)
            .header("Content-Type", "application/json")
        .when()
            .put("/pet");

        response.then()
            .statusCode(200)
            .body("name", equalTo("Mascota Sergio Actualizada"))
            .body("status", equalTo("sold"));

        // Obtener y mostrar la información actualizada de la mascota
        int id = response.jsonPath().getInt("id");
        String name = response.jsonPath().getString("name");
        String status = response.jsonPath().getString("status");

        System.out.println("Mascota actualizada con ID: " + id + ", Nuevo Nombre: " + name + ", Nuevo Estado: " + status);
    }

	@Test(priority = 4)
    public void testGetUpdatedPetById() {
        int petId = 101; // Usar el ID de la mascota actualizada

        Response response = given()
            .pathParam("petId", petId)
        .when()
            .get("/pet/{petId}");

        response.then()
            .statusCode(200)
            .body("id", equalTo(petId));

        // Obtener y mostrar la información actualizada de la mascota
        int id = response.jsonPath().getInt("id");
        String name = response.jsonPath().getString("name");
        String status = response.jsonPath().getString("status");

        System.out.println("Mascota después de la actualización con ID: " + id + ", Nombre: " + name + ", Estado: " + status);
    }
    
	 @Test(priority = 5)
	    public void placeOrder() {
	        // Define the order JSON
	        String orderJson = "{\n" +
	                           "  \"id\": 100,\n" +
	                           "  \"petId\": 101,\n" +
	                           "  \"quantity\": 2,\n" +
	                           "  \"shipDate\": \"2024-09-05T00:00:00Z\",\n" +
	                           "  \"status\": \"placed\",\n" +
	                           "  \"complete\": true\n" +
	                           "}";

	        // Send POST request to place an order
	        Response response = RestAssured
	            .given()
	            .contentType(ContentType.JSON)
	            .body(orderJson)
	            .post("/store/order");

	        // Validate the status code and response body
	        response.then().statusCode(200);
	        response.then().body("status", equalTo("placed"));

	        // Extract petId, quantity from the response
	        int petId = response.jsonPath().getInt("petId");
	        int quantity = response.jsonPath().getInt("quantity");

	        // Fetch pet details by petId
	        Response petResponse = RestAssured
	            .given()
	            .get("/pet/" + petId);

	        // Extract the name of the pet from the pet response
	        String petName = petResponse.jsonPath().getString("name");

	        // Print the details
	        System.out.println("Pet ID: " + petId);
	        System.out.println("Pet Name: " + petName);
	        System.out.println("Quantity Ordered: " + quantity);
	    }
	
    public void testDeletePet() {
        int petId = 101; // Usar el ID de la mascota a eliminar

        // Realizar la solicitud DELETE para eliminar la mascota
        given()
            .pathParam("petId", petId)
        .when()
            .delete("/pet/{petId}")
        .then()
            .statusCode(200);

        // Intentar consultar la mascota para verificar que ha sido eliminada
        Response response = given()
            .pathParam("petId", petId)
        .when()
            .get("/pet/{petId}");

        response.then()
            .statusCode(404); // Verificar que el ID no se encuentra

        // Imprimir un mensaje indicando que la mascota ha sido eliminada
        System.out.println("La mascota con ID: " + petId + " ha sido eliminada.");
    }

	@Test(priority = 6)
    public void testFindPetsByStatus() {
        given()
            .queryParam("status", "available")
        .when()
            .get("/pet/findByStatus")
        .then()
            .statusCode(200)
            .body("size()", greaterThan(0)); // Verificar que hay al menos una mascota con el estado "available"
    }


}
